services:
  zookeeper:
    container_name: zookeeper
    image: 'bitnami/zookeeper:latest'
    pull_policy: missing
    restart: 'no'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - './docker_data:/bitnami'
    networks:
      - ksmart
  kafka:
    container_name: kafka
    image: 'bitnami/kafka:latest'
    init: true
    pull_policy: missing
    restart: 'on-failure'
    ports:
      - '9092:9092'
      - '9093:9093'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9093,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9093,EXTERNAL://127.0.0.1:9092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - './docker_data:/bitnami'
    networks:
      - ksmart
    depends_on:
      - zookeeper
    healthcheck:
      #test: curl -v localhost:9093 || exit 0
      test: sh /opt/bitnami/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9093
      start_period: 10s
      interval: 5s
      timeout: 3s
      retries: 2
  persister:
    container_name: persister
    image: 'ikmkerala/egov-persister:v1.1.4-1367130fc4-1'
    pull_policy: missing
    restart: 'on-failure'
    ports:
      - '8082:8082'
    env_file:
      - ./dev.env
    environment:
      - SERVER_PORT=8082
      - EGOV_PERSIST_YML_REPO_PATH=file:///filemgmnt.yml,file:///egov-workflow-v2-persister.yml
#    extra_hosts:
#      - 'host.docker.internal:host-gateway'
    volumes:
      - './src/main/resources/persister/filemgmnt.yml:/filemgmnt.yml'
      - './egov-workflow-v2-persister.yml:/egov-workflow-v2-persister.yml'
    networks:
      - ksmart
    depends_on:
      kafka:
        condition: service_healthy 
  workflowv2:
    container_name: workflowv2
    image: 'ikmkerala/egov-workflow-v2:v1.2.1-5dbbcb807b-1'
    pull_policy: missing
    restart: 'on-failure'
    ports:
      - '8280:8280'
    env_file:
      - ./dev.env
    environment:
      - SERVER_PORT=8280
#    extra_hosts:
#      - 'host.docker.internal:host-gateway'
    networks:
      - ksmart
    depends_on:
      - persister
  encryptor:
    container_name: encryptor
    image: 'ikmkerala/egov-enc-service:v1.1.2-5dbbcb807b-1'
    pull_policy: missing
    restart: 'on-failure'
    ports:
      - '1234:1234'
    env_file:
      - ./dev.env
    environment:
      - SERVER_PORT=1234
#    extra_hosts:
#      - 'host.docker.internal:host-gateway'
    networks:
      - ksmart
    depends_on:
      - persister
  minio:
    container_name: minio
    image: 'bitnami/minio:latest'
    pull_policy: missing
    restart: 'on-failure'
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_DEFAULT_BUCKETS=filestore
    volumes:
      - './docker_data/minio:/data'
#    extra_hosts:
#      - 'host.docker.internal:host-gateway'
    networks:
      - ksmart
    depends_on:
      - persister
    healthcheck:
      test: curl -i minio:9000/minio/health/live || exit 0
      start_period: 20s
      interval: 5s
      timeout: 3s
      retries: 2
  filestore:
    container_name: filestore
    image: 'ikmkerala/egov-filestore:v1.2.4-5dbbcb807b-1'
    pull_policy: missing
    restart: 'on-failure'
    ports:
      - '8083:8083'
    env_file:
      - ./dev.env
    environment:
      - SERVER_PORT=8083
      - MINIO_URL=http://minio:9000
      - AWS_KEY=minioadmin
      - AWS_SECRETKEY=minioadmin
      - FIXED_BUCKETNAME=filestore
      - MINIO_SOURCE=minio
#    extra_hosts:
#      - 'host.docker.internal:host-gateway'
    networks:
      - ksmart
    depends_on:
      minio:
        condition: service_healthy
  pdfservice:
    container_name: pdfservice
    image: 'ikmkerala/pdf-service:birth-services-5f3e05e5d6-10' 
    pull_policy: missing
    restart: 'on-failure'
    ports:
      - '8081:8080'
    environment:
      - SERVER_PORT=8080
      - KAFKA_BROKER_HOST=kafka:9093
      - DB_HOST=host.docker.internal
      - DB_NAME=egov_filemgmnt
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=123
      - DATA_CONFIG_URLS=file:///residential-certificate-config.json
      - FORMAT_CONFIG_URLS=file:///residential-certificate-format.json
      - EGOV_FILESTORE_SERVICE_HOST=http://filestore:8083
      - EGOV_EXTERNAL_HOST=https://ksmart-dev.lsgkerala.gov.in
      - EGOV_LOCALISATION_HOST=https://ksmart-dev.lsgkerala.gov.in
      - DEFAULT_LOCALISATION_LOCALE=en_IN
      - DEFAULT_LOCALISATION_TENANT=kl
#    extra_hosts:
#      - 'host.docker.internal:host-gateway'
    volumes:
      - './src/test/resources/pdfservice/residential-certificate-config.json:/residential-certificate-config.json'
      - './src/test/resources/pdfservice/residential-certificate-format.json:/residential-certificate-format.json'
    networks:
      - ksmart
    depends_on:
      - persister
      - filestore

networks:
  ksmart:
    name: ksmart-tier
    external: true

# 1. Create network if not exists
# docker network create -d bridge ksmart-tier

# 2. Run docker compose in detached mode
# docker compose up -d

# 3. Stop running containers
# docker compose down

# 4.persister logs
# docker logs persister

#-Dspring.profiles.active=local
#-Dserver.port=8082 
#-Degov.persist.yml.repo.path=file:///D:/KSMART/municipal-services/egov-filemgmnt/src/main/resources/persister/filemgmnt.yml 
#-Dspring.datasource.url=jdbc:p6spy:postgresql://localhost:5432/egov_filemgmnt 
#-Dspring.datasource.username=postgres 
#-Dspring.datasource.password=123
#-Dspring.kafka.bootstrap-servers=localhost:9092

# https://medium.com/@kainikhil/nodejs-how-to-generate-and-properly-serve-pdf-6835737d118e#d8e5